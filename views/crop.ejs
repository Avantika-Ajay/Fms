<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   
   <!-- font awesome cdn link  -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

   <!-- custom css file link  -->
   <link rel="stylesheet" href="styles.css">

   <!-- custom js file link  -->
   <script src="script.js" defer></script>
   <style>
      .cart {
         text-align: center;
         max-width: 600px;
         margin: 20px auto;
         padding: 20px;
         background-color: #fff;
         border-radius: 8px;
         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      #cartItems {
         list-style: none;
         padding: 0;
         margin: 10px 0;
      }

      #cartItems li {
         display: flex;
         justify-content: space-between;
         align-items: center;
         padding: 10px;
         border-bottom: 1px solid #eee;
      }

      #cartItems li button {
         background-color: #ff6347;
         color: #fff;
         border: none;
         padding: 8px 12px;
         cursor: pointer;
         border-radius: 4px;
      }

      #totalAmount {
         font-size: 1.2em;
         font-weight: bold;
         color: #333;
      }
   </style>
</head>

<body>
   
   <div class="container">

      <h3 class="title"> organic products </h3>
   
      <div class="products-container" id="productsContainer">
   

         </div>
         
         </div>
      </div>

   <div class="cart" id="cartContainer">
      <h1>Shopping Cart</h1>
      <ul id="cartItems">
         <!-- Cart items will be displayed here -->
      </ul>
     <h1> <p>Total: ₹<span id="totalAmount">0.00</span></p></h1>
     <button id="buyNowBtn" onclick="buyNow()" class="btn"><h2>Buy Now</h2></button>
   </div>
</div>

</head>

<body>
   <script>
      updateCartDisplay();

      const url_items = '/get-items';

      const productsContainer = document.getElementById('productsContainer');

      fetch(url_items)
      .then(response => {
         if (!response.ok) {
            throw new Error('Network response was not ok');
         }
         return response.json();
      })
      .then(data => {
         data.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.innerHTML = `
            <div class="product" data-name="p-5">
            <img src="images/5.png" alt="">
            <h3>${item.item_name}</h3>
            <div class="price">₹${item.price.toFixed(2)}</div>
            <div class="stars">
               <i class="fas fa-star"></i>
               <i class="fas fa-star"></i>
               <i class="fas fa-star"></i>
               <i class="fas fa-star"></i>
               <i class="fas fa-star-half-alt"></i>
               <span>( 250 )</span>
            </div>
            <div class="buttons">
               <h1><button onclick="addToCart('${item.item_name}', ${item.price.toFixed(2)}, ${item.id})"><i class="fas fa-cart-plus"></i> Add to Cart</button></h1>
            </div>
         </div>
            `;
            // Append the item element to the products container
            productsContainer.appendChild(itemElement);
         });
      })
      .catch(error => {
         console.error('There was a problem getting items:', error);
      });



      let cart = [];
   
      function addToCart(productName, productPrice,id) {
         const item = {
            name: productName,
            price: productPrice,
            quantity: 1,
            id
         };

         const url = '/add-cart-api'; 

         const options = {
         method: 'POST',
         headers: {
            'Content-Type': 'application/json'
         },
         body: JSON.stringify({ item })
         };

         fetch(url, options)
         .then(response => {
            if (!response.ok) {
               throw new Error('Network response was not ok');
            }
            return response.json();
         })
         .then(data => {
            console.log('Item sent successfully:', data);
         })
         .catch(error => {
            console.error('There was a problem sending the item:', error);
         });
   
         const existingItemIndex = cart.findIndex(i => i.name === productName);
   
         if (existingItemIndex !== -1) {
            cart[existingItemIndex].quantity += 1;
         } else {
            cart.push(item);
         }
         console.log(cart)
         updateCartDisplay();
      }
   
      function updateCartDisplay() {
         var totalAmount = 0;
         const url = '/get-cart-items';
         const totalAmountElement = document.getElementById('totalAmount');

// Container to render cart items
const cartItemsContainer = document.getElementById('cartItems');

// Make the fetch request
fetch(url)
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    // Iterate over each cart item in the data
    cartItemsContainer.innerHTML = '';
    data.forEach(cartItem => {
      // Create a div element for each cart item
      const cartItemElement = document.createElement('li');
      // Set the inner HTML of the cart item element

      cartItemElement.innerHTML = `
        <span>${cartItem.item_name} - ₹${cartItem.price.toFixed(2)} x ${cartItem.quantity}</span>
               <button onclick="deleteItem('${cartItem.item_name}',${cartItem.item_id})"><i class="fas fa-trash-alt"></i> Delete</button>

      `;
      // Append the cart item element to the cart items container
      cartItemsContainer.appendChild(cartItemElement);
      totalAmount+=cartItem.price*cartItem.quantity;
    });

    totalAmountElement.textContent = totalAmount.toFixed(2);
  })
  .catch(error => {
    console.error('There was a problem getting cart items:', error);
  });
        
      }
   
      function deleteItem(productName,item_id) {
         const url = '/delete-cart-api';

         const options = {
         method: 'POST',
         headers: {
            'Content-Type': 'application/json'
         },
         body: JSON.stringify({ item_id })
         };

         // Make the fetch request
         fetch(url, options)
         .then(response => {
            if (!response.ok) {
               throw new Error('Network response was not ok');
            }

            return response.json();
            
         })
         .then(data => {
            updateCartDisplay();
            console.log('Item deleted successfully:', data);
         })
         .catch(error => {
            console.error('There was a problem deleting the item:', error);
         });

         const index = cart.findIndex(i => i.name === productName);
         if (index !== -1) {
            cart.splice(index, 1);
            updateCartDisplay();
         }
      }
      function buyNow() {
         // Check if the cart is not empty before proceeding to checkout
         fetch('/make-order-api', {
         method: 'POST',
         headers: {
            'Content-Type': 'application/json'
         },
         body: JSON.stringify({}) // Empty body
         })
         .then(response => {
         // Handle the response
         if (response.ok) {
            alert("Items have been ordered, taking you to the orders page...");
            window.location.href='/orders';
         } else {
            throw new Error('Error making the request');
         }
         })
         .then(data => {
         // Handle the JSON data returned from the server
         console.log(data);
         })
         .catch(error => {
         // Handle any errors that occurred during the request
         console.error('Error:', error);
         });

         
       
      }
     
   </script>
</body>
</html>
